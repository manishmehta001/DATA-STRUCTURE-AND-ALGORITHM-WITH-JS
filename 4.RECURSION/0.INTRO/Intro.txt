Recursion :-
  recursion is a programming concept where a function calls itself to solve a problem. It's like solving a problem step by step, where each step involves solving a smaller version of the same problem, until you reach a base case that stops the recursion.

Key Concepts of Recursion:-
    Base Case: This is the condition that tells the function to stop calling itself. Without a base case, recursion would continue indefinitely and cause a stack overflow (infinite loop).
    Recursive Case: This is the part of the function where it calls itself with smaller inputs, gradually reducing the problem to the base case.
Example: Factorial of a Number
    The factorial of a number n (denoted n!) is the product of all integers from 1 to n.
    The formula is:
    n! = n * (n - 1) * (n - 2) * ... * 1
    Base case:
    1! = 1

Recursive Function to Calculate Factorial:

    function factorial(n) {
    if (n === 1) {  // Base case
        return 1;
    } else {
        return n * factorial(n - 1);  // Recursive case
    }
    }
    console.log(factorial(5));  // Output: 120

Dry Run for factorial(5):-
Let's break down how the recursive function works step-by-step for factorial(5):

First call: factorial(5)
n = 5, so factorial(5) will return 5 * factorial(4)
Second call: factorial(4)
n = 4, so factorial(4) will return 4 * factorial(3)
Third call: factorial(3)
n = 3, so factorial(3) will return 3 * factorial(2)
Fourth call: factorial(2)
n = 2, so factorial(2) will return 2 * factorial(1)
Base case: factorial(1)
n = 1, so factorial(1) returns 1 (this is the base case)

Now, recursion starts to unwind, returning the results back up:

factorial(2) returns 2 * 1 = 2
factorial(3) returns 3 * 2 = 6
factorial(4) returns 4 * 6 = 24
factorial(5) returns 5 * 24 = 120
Thus, the final result is 120.

Understanding Recursion Step-by-Step:-
    Recursive Case: When the function is called, it breaks the problem into smaller problems (by calling itself with smaller inputs).
    Base Case: Once the problem is small enough (like n = 1), the function stops and begins returning the results.

Advantages of Recursion:-
    Simplifies Code: Some problems are easier to solve with recursion, especially those that have a repetitive or divide-and-conquer nature (like tree traversal or calculating factorial).
    Clean and Intuitive: Recursive solutions can often be cleaner and easier to read than iterative solutions.

Disadvantages of Recursion:-
    Memory Overhead: Each recursive call adds a new layer to the call stack. If there are too many recursive calls (like a large number for factorial), it can cause a stack overflow.
    Slower Performance: If not optimized (e.g., by using techniques like memoization), recursion can be slower because the function keeps calling itself multiple times with the same inputs.
    
Real-Life Example of Recursion:
    Imagine you are in a hotel with many floors, and you need to go from the 10th floor to the ground floor. The easiest way is to take the elevator down one floor at a time until you reach the ground floor.
        Recursive case: From the 10th floor, go down one floor and repeat.
        Base case: When you reach the ground floor, stop.
    This process is similar to how recursion works: calling the same function repeatedly (taking one step down) until it hits the base case (reaching the ground floor).

Conclusion:
Recursion is a useful concept that allows a function to solve problems by breaking them down into smaller, similar problems. It's especially helpful in problems like calculating factorials, traversing trees, and performing certain algorithms. However, it must be used carefully to avoid issues like stack overflow and inefficiency.