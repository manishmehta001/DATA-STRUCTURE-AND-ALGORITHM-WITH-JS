/----------------------------------------🎯  Tree Traversal 🎯-----------------------------------------------------------/

🎯 Tree Traversal :-
------------------
    👉 Trees can be traversed in different ways to access and process their nodes efficiently.

    🎯 It supports the following main traversal techniques:-
    -------------------------------------------------------
        📌 Depth-First Search (DFS) (Explores as deep as possible before backtracking)
        📌 Breadth-First Search (BFS) / Level Order Traversal (Explores level by level)

        🎯 1️⃣ Depth-First Search (DFS) Traversals:-
        -------------------------------------------
            👉 DFS has three main variations:-
            ---------------------------------
                1️⃣ Preorder Traversal (Root → Left → Right) 🌲
                2️⃣ Inorder Traversal (Left → Root → Right) 🍃
                3️⃣ Postorder Traversal (Left → Right → Root) 🍂


                🎯 1️⃣ Preorder Traversal (Root → Left → Right) 🌲:-
                ----------------------------------------------------
                    💡 Thought Process (Pseudocode):-
                    --------------------------------
                        ✅ Visit the root node.
                        ✅ Recursively traverse the left subtree.
                        ✅ Recursively traverse the right subtree.

                        👉 Example Implementation of Preorder Traversal (Recursive & Iterative):-
                        -------------------------------------------------------------------------
                                    class TreeNode {
                                        constructor(value) {
                                            this.value = value;
                                            this.left = null;
                                            this.right = null;
                                        }
                                    }
                                    
                                    class BinaryTree {
                                        constructor() {
                                            this.root = null;
                                        }
                                    
                                        // Recursive Preorder Traversal
                                        preorderRecursive(node) {
                                            if (node === null) return;
                                            console.log(node.value); // Visit root
                                            this.preorderRecursive(node.left); // Left subtree
                                            this.preorderRecursive(node.right); // Right subtree
                                        }
                                    
                                        // Iterative Preorder Traversal (Using Stack)
                                        preorderIterative() {
                                            if (!this.root) return;
                                            let stack = [this.root];
                                            while (stack.length > 0) {
                                                let node = stack.pop();
                                                console.log(node.value); // Visit root
                                    
                                                // Push right first so that left is processed first
                                                if (node.right) stack.push(node.right);
                                                if (node.left) stack.push(node.left);
                                            }
                                        }
                                    }
                                    👉 Example Execution:-
                                    ---------------------
                                                             1
                                                            / \
                                                           2   3
                                                          / \
                                                         4   5
                                    📌 Preorder (Recursive or Iterative) Output: 1 → 2 → 4 → 5 → 3


                🎯 2️⃣ Inorder Traversal (Left → Root → Right) 🍃:-
                --------------------------------------------------
                    💡 Thought Process (Pseudocode):-
                    --------------------------------
                        ✅ Recursively traverse the left subtree.
                        ✅ Visit the root node.
                        ✅ Recursively traverse the right subtree.

                        👉 Example Implementation of Inorder Traversal (Recursive & Iterative):-
                        -----------------------------------------------------------------------
                                    class BinaryTree {
                                        // Recursive Inorder Traversal
                                        inorderRecursive(node) {
                                            if (node === null) return;
                                            this.inorderRecursive(node.left); // Left subtree
                                            console.log(node.value); // Visit root
                                            this.inorderRecursive(node.right); // Right subtree
                                        }
                                    
                                        // Iterative Inorder Traversal (Using Stack)
                                        inorderIterative() {
                                            let stack = [];
                                            let current = this.root;
                                            while (current !== null || stack.length > 0) {
                                                while (current !== null) {
                                                    stack.push(current);
                                                    current = current.left;
                                                }
                                                current = stack.pop();
                                                console.log(current.value); // Visit root
                                                current = current.right;
                                            }
                                        }
                                    }
                                    👉 Example Execution:-
                                    ---------------------
                                                             1
                                                            / \
                                                           2   3
                                                          / \
                                                         4   5

                                    📌 Inorder (Recursive or Iterative) Output: 4 → 2 → 5 → 1 → 3


                🎯 3️⃣ Postorder Traversal (Left → Right → Root) 🍂:-
                ----------------------------------------------------
                    💡 Thought Process (Pseudocode):-
                    --------------------------------
                        ✅ Recursively traverse the left subtree.
                        ✅ Recursively traverse the right subtree.
                        ✅ Visit the root node.
                               
                        👉 Example Implementation of Postorder Traversal (Recursive & Iterative):-
                        -------------------------------------------------------------------------
                                    class BinaryTree {
                                        // Recursive Postorder Traversal
                                        postorderRecursive(node) {
                                            if (node === null) return;
                                            this.postorderRecursive(node.left); // Left subtree
                                            this.postorderRecursive(node.right); // Right subtree
                                            console.log(node.value); // Visit root
                                        }
                                    
                                        // Iterative Postorder Traversal (Using Two Stacks)
                                        postorderIterative() {
                                            if (!this.root) return;
                                            let stack1 = [this.root], stack2 = [];
                                            while (stack1.length > 0) {
                                                let node = stack1.pop();
                                                stack2.push(node);
                                                if (node.left) stack1.push(node.left);
                                                if (node.right) stack1.push(node.right);
                                            }
                                            while (stack2.length > 0) {
                                                console.log(stack2.pop().value); // Visit root
                                            }
                                        }
                                    }
                                    👉 Example Execution:-
                                    ---------------------
                                                             1
                                                            / \
                                                           2   3
                                                          / \
                                                         4   5

                                    📌 Postorder (Recursive or Iterative) Output: 4 → 5 → 2 → 3 → 1
                               

        🎯 2️⃣ Breadth-First Search (BFS) / Level Order Traversal 🚀 :-
        --------------------------------------------------------------
            💡 Thought Process (Pseudocode):-
            --------------------------------
                ✅ Start from the root node.
                ✅ Use a queue to process nodes level by level.
                ✅ Enqueue left and right children of the node before dequeuing the next node.

                👉 Example Implementation of Level Order Traversal:-
                ---------------------------------------------------
                            class BinaryTree {
                                // Level Order Traversal (Using Queue)
                                levelOrder() {
                                    if (!this.root) return;
                                    let queue = [this.root];
                                    while (queue.length > 0) {
                                        let node = queue.shift();
                                        console.log(node.value); // Visit node
                                        if (node.left) queue.push(node.left);
                                        if (node.right) queue.push(node.right);
                                    }
                                }
                            }
                            👉 Example Execution:-
                            ----------------------
                                                         1
                                                        / \
                                                       2   3
                                                      / \
                                                     4   5

                            📌 Level Order Output: 1 → 2 → 3 → 4 → 5


🚀 Final Tree Traversal Code Class with All Methods:-
----------------------------------------------------

            class TreeNode {
                constructor(value) {
                    this.value = value;
                    this.left = null;
                    this.right = null;
                }
            }
            
            class BinaryTree {
                constructor() {
                    this.root = null;
                }
            
                // Preorder Traversal (Root -> Left -> Right)
                preorder(node, result = []) {
                    if (node) {
                        result.push(node.value);
                        this.preorder(node.left, result);
                        this.preorder(node.right, result);
                    }
                    return result;
                }
            
                // Inorder Traversal (Left -> Root -> Right)
                inorder(node, result = []) {
                    if (node) {
                        this.inorder(node.left, result);
                        result.push(node.value);
                        this.inorder(node.right, result);
                    }
                    return result;
                }
            
                // Postorder Traversal (Left -> Right -> Root)
                postorder(node, result = []) {
                    if (node) {
                        this.postorder(node.left, result);
                        this.postorder(node.right, result);
                        result.push(node.value);
                    }
                    return result;
                }
            }
            
            // Example Usage
            const tree = new BinaryTree();
            tree.root = new TreeNode(1);
            tree.root.left = new TreeNode(2);
            tree.root.right = new TreeNode(3);
            tree.root.left.left = new TreeNode(4);
            tree.root.left.right = new TreeNode(5);
            tree.root.right.left = new TreeNode(6);
            tree.root.right.right = new TreeNode(7);
            
            console.log("Preorder Traversal:", tree.preorder(tree.root));
            console.log("Inorder Traversal:", tree.inorder(tree.root));
            console.log("Postorder Traversal:", tree.postorder(tree.root));
                            
                             
            
🎯 Final Complexity Summary :-
------------------------------
    Traversal	            Time Complexity	            Space Complexity (Best)	    Space Complexity (Worst)
    Preorder (DFS)	            O(N)	                    O(log N) (Balanced)	        O(N) (Skewed)
    Inorder (DFS)	            O(N)	                    O(log N) (Balanced)	        O(N) (Skewed)
    Postorder (DFS)	            O(N)	                    O(log N) (Balanced)	        O(N) (Skewed)
    Level Order (BFS)	        O(N)	                    O(N)	                    O(N)

    👉 In summary:-
    --------------
        DFS (Preorder, Inorder, Postorder) is better in space for balanced trees (O(log N)), but worse for skewed trees (O(N)).
        BFS always takes O(N) space, regardless of the tree structure.

    🚀 Conclusion:-
    --------------
        👉 Use DFS if recursion is preferred and memory is not a big concern.
        👉 Use BFS when you need to process nodes level-by-level.


✅ Summary of Tree Traversals:-
------------------------------
    📌 DFS (Depth-First Search):-
    ----------------------------
        👉 Preorder (Root → Left → Right) → 1 → 2 → 4 → 5 → 3
        👉 Inorder (Left → Root → Right) → 4 → 2 → 5 → 1 → 3
        👉 Postorder (Left → Right → Root) → 4 → 5 → 2 → 3 → 1

    📌 BFS (Breadth-First Search) / Level Order:-
    --------------------------------------------
        👉 Level Order (Top to Bottom) → 1 → 2 → 3 → 4 → 5

                            


                        