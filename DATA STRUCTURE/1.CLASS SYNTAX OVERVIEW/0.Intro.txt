/=================================🚀 Understanding Classes in JavaScript🚀============================================/

🎯 What is a Class? :-
--------------------
    A class is a blueprint for creating objects. It defines properties (data) and methods (functions) that
    the objects will have.Instead of defining objects separately, a class helps create multiple objects with similar structures.

    Think of a class as a cookie cutter 🍪, and the objects as the cookies made from it.


💡 How JavaScript Implements Classes:-
-------------------------------------
    JavaScript introduced the class keyword in ES6 (ECMAScript 2015) to make object-oriented programming easier.
    🔹 Before ES6, we used constructor functions to create objects.
    🔹 With ES6, JavaScript provides a clearer, more structured way to define classes.

    ✅ Creating a Class in JavaScript:-
    -----------------------------------
            class Person {
                constructor(name, age) {
                this.name = name; // Property
                this.age = age;   // Property
                }
            
                greet() { 
                console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
                }
            }
            
            // Creating objects from the class
            const person1 = new Person("Alice", 25);
            const person2 = new Person("Bob", 30);
            
            person1.greet(); // Hello, my name is Alice and I am 25 years old.
            person2.greet(); // Hello, my name is Bob and I am 30 years old.

    ------------------------------------------
    👉 Here, Person is a class, and person1, person2 are instances (objects) of that class.


🎯 Important Object-Oriented Concepts in JavaScript:-
----------------------------------------------------
    1️⃣  Abstraction 🧩:-
    -------------------
        👉 Hiding complex details and only showing necessary features to the user.
        💡 Think of a car 🚗—you just press the accelerator to increase speed, but you don’t need to know how the engine works internally.

        ✅ Example of Abstraction in JavaScript:-
        ----------------------------------------
                class Car {
                    constructor(brand) {
                    this.brand = brand;
                    }
                
                    startEngine() { 
                    console.log("Engine started!"); // Hides complex internal details
                    }
                }
                
                const myCar = new Car("Tesla");
                myCar.startEngine(); // 🚀 Engine started!

        ---------------------------------------------------
        👉 The startEngine() function hides the internal details of how the engine starts.
        
    2️⃣ Encapsulation 🔐:-
    ---------------------
        👉 Wrapping data and methods together in a single unit (class) and restricting direct access to some parts of the object.
        💡 Think of a bank account 💳—you can deposit and withdraw money but cannot directly modify the balance.
        
        ✅ Example of Encapsulation in JavaScript:-
        ------------------------------------------
                class BankAccount {
                    #balance; // Private property
                
                    constructor(initialBalance) {
                    this.#balance = initialBalance; 
                    }
                
                    deposit(amount) {
                    this.#balance += amount;
                    console.log(`Deposited: $${amount}, New Balance: $${this.#balance}`);
                    }
                
                    getBalance() {
                    return `Your balance is: $${this.#balance}`;
                    }
                }
                
                const myAccount = new BankAccount(1000);
                myAccount.deposit(500); // Deposited: $500, New Balance: $1500
                console.log(myAccount.getBalance()); // ✅ Your balance is: $1500
                console.log(myAccount.#balance); // ❌ Error: Private field cannot be accessed directly

        ----------------------------------------------  
        👉 The #balance property cannot be accessed directly from outside the class.


    3️⃣ Polymorphism 🎭:-
    --------------------
        👉 The ability of a function or method to take multiple forms based on the object it is acting upon.
        💡 Think of an animal 🐕🐱—a dog barks while a cat meows, but both are "animals."
        
        ✅ Example of Polymorphism in JavaScript:-
        -----------------------------------------
                class Animal {
                    speak() {
                    console.log("Animal makes a sound");
                    }
                }
                
                class Dog extends Animal {
                    speak() {
                    console.log("Woof Woof! 🐶");
                    }
                }
                
                class Cat extends Animal {
                    speak() {
                    console.log("Meow Meow! 🐱");
                    }
                }
                
                const myDog = new Dog();
                const myCat = new Cat();
                
                myDog.speak(); // Woof Woof! 🐶
                myCat.speak(); // Meow Meow! 🐱
                
        ---------------------------------------------
        👉 Here, both Dog and Cat override the speak() method from the Animal class.

🚀 Summary:-
-----------
    ✅ Classes provide a blueprint for creating objects.
    ✅ Abstraction hides complex details and only exposes necessary functions.
    ✅ Encapsulation restricts direct access to certain data, ensuring security.
    ✅ Polymorphism allows different objects to use the same method in different ways.


🎯 Why Use Classes in JavaScript?:-
---------------------------------
    🔹 Makes code organized and reusable ♻️
    🔹 Reduces redundancy with inheritance 📜
    🔹 Improves security with encapsulation 🔐
    🔹 Makes debugging easier ✅

Now, you have a solid understanding of Classes and OOP concepts in JavaScript! 🚀 Happy coding! 💻