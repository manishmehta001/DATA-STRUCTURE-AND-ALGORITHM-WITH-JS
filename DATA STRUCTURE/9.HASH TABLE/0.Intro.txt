/----------------------------🚀 Hash Table - The Superfast Key-Value Dictionary! 🗝️📦------------------------------/

🎯 Objectives:-
--------------
✅ Understand what a hash table is 📖
✅ Learn about hashing algorithms 🔢
✅ Explore what makes a good hashing algorithm 🏆
✅ Discover how collisions occur ⚠️
✅ Learn how to handle collisions using Separate Chaining & Linear Probing 🏗️


🏛️ What is a Hash Table? :-
--------------------------
Ex:-Imagine you walk into a library 📚, and you need to find a book quickly ⏩. If all the books were scattered randomly, 
    you'd waste a lot of time searching.

Instead, libraries use a system—books are assigned shelves based on categories 📖➡️📂.

🔹 A Hash Table works the same way!
It stores data in a structured format where each item has a key 🔑 (like the book title) and a value 📦 (like the book's location).

🛠️ Key Features:-
----------------
    ✅ Superfast searches! (Like a library's indexing system)
    ✅ Instant access to data!
    ✅ Efficient storage for large data sets!



🔢 What is a Hashing Algorithm? :-
---------------------------------
    Think of a hashing algorithm like a magic sorting hat 🎩 from Harry Potter 🏰. It takes a key (a name) and sorts it 
    into a specific house (storage location).

📌 How does it work? :-
----------------------
    1️⃣ You enter a key (e.g., "Harry Potter").
    2️⃣ The hash function 🧮 converts it into a unique number (e.g., 173).
    3️⃣ That number determines where the value will be stored in a hash table!

💡 Example:-
-----------
    ✅ hash("apple") → 🍏 Stored at Index 2
    ✅ hash("banana") → 🍌 Stored at Index 5
    ✅ hash("grape") → 🍇 Stored at Index 7



🏆 What Makes a Good Hashing Algorithm? :-
-----------------------------------------
    A great hashing algorithm should have these qualities:-
    ------------------------------------------------------
        🎯 FAST! - Quickly computes the index in O(1) time. ⏩
        🎯 Even Distribution! - Prevents clustering & spreads data evenly. 📊
        🎯 Deterministic! - The same key always produces the same index. 🎯
        🎯 Handles Collisions Well! - Can manage cases when two keys get assigned the same index. ⚠️



⚠️ What are Collisions? (Oops! 🤯) :-
------------------------------------
    A collision happens when two different keys generate the same index in the table. 🚧

💥 Example:-
-----------
    Imagine you're at a restaurant 🍽️, and two customers order the same dish 🍕. The chef accidentally gives both 
    orders the same order number. Now, there's confusion! 😵‍💫

Similarly, in a hash table, two different keys might get assigned the same index!


🏗️ How to Handle Collisions?:-
-----------------------------
    There are two popular methods to resolve collisions:-
    ---------------------------------------------------
        1️⃣ Separate Chaining (Linked List Approach) 🔗:-
        -----------------------------------------------
            🔹 Instead of storing just one value at each index, we store a list (chain) of values.

            ✅ Think of it like a restaurant table 🍽️ with multiple seats!
            If two people arrive at the same time, they share the table instead of fighting for a single chair.

            🔹 Example:-
            -----------
                        Index 3 → ["apple 🍏", "apricot 🍑"]

            If "apple" and "apricot" both hash to index 3, they are linked together at that index.


        2️⃣ Linear Probing (Finding the Next Available Spot) 🚶‍♂️➡️ :-
        ----------------------------------------------------------
            🔹 Instead of making a chain, we find the next empty slot and store the value there.

            ✅ Think of it like parking your car 🚗!
            If your usual parking spot is taken, you find the next closest empty spot.

            🔹 Example:-
            ------------
                        Index 3 → apple 🍏
                        Index 4 → (empty) ✅  (New item goes here!)
                        
            If "apricot 🍑" hashes to 3, but it's already occupied, we move to the next available index (4) and store 
            it there.


🏁 Final Thoughts (Why Use Hash Tables?) :-
------------------------------------------
    ✔ Super FAST! ⚡ (O(1) lookup time in most cases)
    ✔ Used in caching, databases, password storage, and data indexing.
    ✔ Powerful for storing key-value pairs (e.g., Usernames & Emails 📧, Product IDs & Prices 💰).


🔥 Real-Life Examples of Hash Tables:-
-------------------------------------
    📞 Phone Contacts - You type a name, and your phone instantly finds the number!
    🛒 E-Commerce Carts - Stores user carts efficiently!
    🔍 Search Engines - Index billions of web pages for quick search results!
    📑 Databases - Store & retrieve massive amounts of data!


⏳ Time Complexity of a Hash Table:-
-----------------------------------
    Hash tables are super fast for most operations, but their performance depends on factors like hashing function
    quality and collision handling method.
    
    Operation	        Average Case (⚡ Best Performance)	        Worst Case (🐢 Slowest Performance)
    -------------------------------------------------------------------------------------------------------
    Insertion 📝	             O(1) ✅	                            O(n) ❌ (if too many collisions)
    Deletion ❌	                O(1) ✅	                           O(n) ❌ (if collisions form long chains)
    Search (Lookup) 🔍	         O(1) ✅	                            O(n) ❌ (if everything is in one chain)
    

🎯 Why O(1) in the Best Case?:-
------------------------------
    Hash tables store data at directly computed indexes, so retrieving data takes constant time.
    🔹 Example: If hash("apple") → index 3, then table[3] instantly gives us 🍏 in O(1) time!

⚠️ Why O(n) in the Worst Case?:-
-------------------------------
    If the hash function is bad, many keys can get assigned the same index, leading to long chains.
    🔹 Example: If all names in a phonebook 📖 get stored in one bucket, searching for "Zara" might take O(n) time. 😢

🛠 How to Avoid O(n) Time Complexity? :-
---------------------------------------
    ✅ Use a good hash function (to spread data evenly) 🏆
    ✅ Keep the load factor low (avoid too many entries per index) 📉
    ✅ Use efficient collision resolution techniques (Separate Chaining or Linear Probing) 🏗️

🔹 Load Factor = (Number of Elements) / (Size of Hash Table):-
------------------------------------------------------------
    💡Ideal Load Factor 🏆: ≤ 0.7
    💡If the load factor is too high, the table should resize (double the size) to maintain efficiency.

    
💡 Conclusion: Hash Tables are one of the most powerful data structures for quick lookups and efficient storage. 
Mastering them will make you a better problem-solver in competitive programming & real-world applications! 🚀✨